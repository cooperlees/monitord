//! # D-Bus interface proxy for: `org.freedesktop.systemd1.Service`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/systemd1/unit/chronyd_2eservice' from service 'org.freedesktop.systemd1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
#![allow(warnings)]
#![allow(clippy)]
use zbus::proxy;
#[proxy(
    interface = "org.freedesktop.systemd1.Service",
    default_service = "org.freedesktop.systemd1",
    default_path = "/org/freedesktop/systemd1/unit/chronyd_2eservice"
)]
trait Service {
    /// AttachProcesses method
    fn attach_processes(&self, subcgroup: &str, pids: &[u32]) -> zbus::Result<()>;

    /// BindMount method
    fn bind_mount(
        &self,
        source: &str,
        destination: &str,
        read_only: bool,
        mkdir: bool,
    ) -> zbus::Result<()>;

    /// DumpFileDescriptorStore method
    fn dump_file_descriptor_store(
        &self,
    ) -> zbus::Result<Vec<(String, u32, u32, u32, u64, u32, u32, String, u32)>>;

    /// GetProcesses method
    fn get_processes(&self) -> zbus::Result<Vec<(String, u32, String)>>;

    /// MountImage method
    fn mount_image(
        &self,
        source: &str,
        destination: &str,
        read_only: bool,
        mkdir: bool,
        options: &[&(&str, &str)],
    ) -> zbus::Result<()>;

    /// AllowedCPUs property
    #[zbus(property, name = "AllowedCPUs")]
    fn allowed_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// AllowedMemoryNodes property
    #[zbus(property)]
    fn allowed_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// AmbientCapabilities property
    #[zbus(property)]
    fn ambient_capabilities(&self) -> zbus::Result<u64>;

    /// AppArmorProfile property
    #[zbus(property)]
    fn app_armor_profile(&self) -> zbus::Result<(bool, String)>;

    /// BPFProgram property
    #[zbus(property, name = "BPFProgram")]
    fn bpfprogram(&self) -> zbus::Result<Vec<(String, String)>>;

    /// BindPaths property
    #[zbus(property)]
    fn bind_paths(&self) -> zbus::Result<Vec<(String, String, bool, u64)>>;

    /// BindReadOnlyPaths property
    #[zbus(property)]
    fn bind_read_only_paths(&self) -> zbus::Result<Vec<(String, String, bool, u64)>>;

    /// BlockIOAccounting property
    #[zbus(property, name = "BlockIOAccounting")]
    fn block_ioaccounting(&self) -> zbus::Result<bool>;

    /// BlockIODeviceWeight property
    #[zbus(property, name = "BlockIODeviceWeight")]
    fn block_iodevice_weight(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// BlockIOReadBandwidth property
    #[zbus(property, name = "BlockIOReadBandwidth")]
    fn block_ioread_bandwidth(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// BlockIOWeight property
    #[zbus(property, name = "BlockIOWeight")]
    fn block_ioweight(&self) -> zbus::Result<u64>;

    /// BlockIOWriteBandwidth property
    #[zbus(property, name = "BlockIOWriteBandwidth")]
    fn block_iowrite_bandwidth(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// BusName property
    #[zbus(property)]
    fn bus_name(&self) -> zbus::Result<String>;

    /// CPUAccounting property
    #[zbus(property, name = "CPUAccounting")]
    fn cpuaccounting(&self) -> zbus::Result<bool>;

    /// CPUAffinity property
    #[zbus(property, name = "CPUAffinity")]
    fn cpuaffinity(&self) -> zbus::Result<Vec<u8>>;

    /// CPUAffinityFromNUMA property
    #[zbus(property, name = "CPUAffinityFromNUMA")]
    fn cpuaffinity_from_numa(&self) -> zbus::Result<bool>;

    /// CPUQuotaPerSecUSec property
    #[zbus(property, name = "CPUQuotaPerSecUSec")]
    fn cpuquota_per_sec_usec(&self) -> zbus::Result<u64>;

    /// CPUQuotaPeriodUSec property
    #[zbus(property, name = "CPUQuotaPeriodUSec")]
    fn cpuquota_period_usec(&self) -> zbus::Result<u64>;

    /// CPUSchedulingPolicy property
    #[zbus(property, name = "CPUSchedulingPolicy")]
    fn cpuscheduling_policy(&self) -> zbus::Result<i32>;

    /// CPUSchedulingPriority property
    #[zbus(property, name = "CPUSchedulingPriority")]
    fn cpuscheduling_priority(&self) -> zbus::Result<i32>;

    /// CPUSchedulingResetOnFork property
    #[zbus(property, name = "CPUSchedulingResetOnFork")]
    fn cpuscheduling_reset_on_fork(&self) -> zbus::Result<bool>;

    /// CPUShares property
    #[zbus(property, name = "CPUShares")]
    fn cpushares(&self) -> zbus::Result<u64>;

    /// CPUUsageNSec property
    #[zbus(property, name = "CPUUsageNSec")]
    fn cpuusage_nsec(&self) -> zbus::Result<u64>;

    /// CPUWeight property
    #[zbus(property, name = "CPUWeight")]
    fn cpuweight(&self) -> zbus::Result<u64>;

    /// CacheDirectory property
    #[zbus(property)]
    fn cache_directory(&self) -> zbus::Result<Vec<String>>;

    /// CacheDirectoryMode property
    #[zbus(property)]
    fn cache_directory_mode(&self) -> zbus::Result<u32>;

    /// CacheDirectorySymlink property
    #[zbus(property)]
    fn cache_directory_symlink(&self) -> zbus::Result<Vec<(String, String, u64)>>;

    /// CapabilityBoundingSet property
    #[zbus(property)]
    fn capability_bounding_set(&self) -> zbus::Result<u64>;

    /// CleanResult property
    #[zbus(property)]
    fn clean_result(&self) -> zbus::Result<String>;

    /// ConfigurationDirectory property
    #[zbus(property)]
    fn configuration_directory(&self) -> zbus::Result<Vec<String>>;

    /// ConfigurationDirectoryMode property
    #[zbus(property)]
    fn configuration_directory_mode(&self) -> zbus::Result<u32>;

    /// ControlGroup property
    #[zbus(property)]
    fn control_group(&self) -> zbus::Result<String>;

    /// ControlGroupId property
    #[zbus(property)]
    fn control_group_id(&self) -> zbus::Result<u64>;

    /// ControlPID property
    #[zbus(property, name = "ControlPID")]
    fn control_pid(&self) -> zbus::Result<u32>;

    /// CoredumpFilter property
    #[zbus(property)]
    fn coredump_filter(&self) -> zbus::Result<u64>;

    /// CoredumpReceive property
    #[zbus(property)]
    fn coredump_receive(&self) -> zbus::Result<bool>;

    /// DefaultMemoryLow property
    #[zbus(property)]
    fn default_memory_low(&self) -> zbus::Result<u64>;

    /// DefaultMemoryMin property
    #[zbus(property)]
    fn default_memory_min(&self) -> zbus::Result<u64>;

    /// DefaultStartupMemoryLow property
    #[zbus(property)]
    fn default_startup_memory_low(&self) -> zbus::Result<u64>;

    /// Delegate property
    #[zbus(property)]
    fn delegate(&self) -> zbus::Result<bool>;

    /// DelegateControllers property
    #[zbus(property)]
    fn delegate_controllers(&self) -> zbus::Result<Vec<String>>;

    /// DelegateSubgroup property
    #[zbus(property)]
    fn delegate_subgroup(&self) -> zbus::Result<String>;

    /// DeviceAllow property
    #[zbus(property)]
    fn device_allow(&self) -> zbus::Result<Vec<(String, String)>>;

    /// DevicePolicy property
    #[zbus(property)]
    fn device_policy(&self) -> zbus::Result<String>;

    /// DisableControllers property
    #[zbus(property)]
    fn disable_controllers(&self) -> zbus::Result<Vec<String>>;

    /// DynamicUser property
    #[zbus(property)]
    fn dynamic_user(&self) -> zbus::Result<bool>;

    /// EffectiveCPUs property
    #[zbus(property, name = "EffectiveCPUs")]
    fn effective_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// EffectiveMemoryNodes property
    #[zbus(property)]
    fn effective_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// Environment property
    #[zbus(property)]
    fn environment(&self) -> zbus::Result<Vec<String>>;

    /// EnvironmentFiles property
    #[zbus(property)]
    fn environment_files(&self) -> zbus::Result<Vec<(String, bool)>>;

    /// ExecCondition property
    #[zbus(property)]
    fn exec_condition(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecConditionEx property
    #[zbus(property)]
    fn exec_condition_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecMainCode property
    #[zbus(property)]
    fn exec_main_code(&self) -> zbus::Result<i32>;

    /// ExecMainExitTimestamp property
    #[zbus(property)]
    fn exec_main_exit_timestamp(&self) -> zbus::Result<u64>;

    /// ExecMainExitTimestampMonotonic property
    #[zbus(property)]
    fn exec_main_exit_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// ExecMainPID property
    #[zbus(property, name = "ExecMainPID")]
    fn exec_main_pid(&self) -> zbus::Result<u32>;

    /// ExecMainStartTimestamp property
    #[zbus(property)]
    fn exec_main_start_timestamp(&self) -> zbus::Result<u64>;

    /// ExecMainStartTimestampMonotonic property
    #[zbus(property)]
    fn exec_main_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// ExecMainStatus property
    #[zbus(property)]
    fn exec_main_status(&self) -> zbus::Result<i32>;

    /// ExecPaths property
    #[zbus(property)]
    fn exec_paths(&self) -> zbus::Result<Vec<String>>;

    /// ExecReload property
    #[zbus(property)]
    fn exec_reload(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecReloadEx property
    #[zbus(property)]
    fn exec_reload_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecSearchPath property
    #[zbus(property)]
    fn exec_search_path(&self) -> zbus::Result<Vec<String>>;

    /// ExecStart property
    #[zbus(property)]
    fn exec_start(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecStartEx property
    #[zbus(property)]
    fn exec_start_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecStartPost property
    #[zbus(property)]
    fn exec_start_post(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecStartPostEx property
    #[zbus(property)]
    fn exec_start_post_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecStartPre property
    #[zbus(property)]
    fn exec_start_pre(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecStartPreEx property
    #[zbus(property)]
    fn exec_start_pre_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecStop property
    #[zbus(property)]
    fn exec_stop(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecStopEx property
    #[zbus(property)]
    fn exec_stop_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExecStopPost property
    #[zbus(property)]
    fn exec_stop_post(
        &self,
    ) -> zbus::Result<Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>>;

    /// ExecStopPostEx property
    #[zbus(property)]
    fn exec_stop_post_ex(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            Vec<String>,
            Vec<String>,
            u64,
            u64,
            u64,
            u64,
            u32,
            i32,
            i32,
        )>,
    >;

    /// ExitType property
    #[zbus(property)]
    fn exit_type(&self) -> zbus::Result<String>;

    /// ExtensionDirectories property
    #[zbus(property)]
    fn extension_directories(&self) -> zbus::Result<Vec<String>>;

    /// ExtensionImagePolicy property
    #[zbus(property)]
    fn extension_image_policy(&self) -> zbus::Result<String>;

    /// ExtensionImages property
    #[zbus(property)]
    #[allow(clippy::type_complexity)]
    fn extension_images(&self) -> zbus::Result<Vec<(String, bool, Vec<(String, String)>)>>;

    /// FileDescriptorStoreMax property
    #[zbus(property)]
    fn file_descriptor_store_max(&self) -> zbus::Result<u32>;

    /// FileDescriptorStorePreserve property
    #[zbus(property)]
    fn file_descriptor_store_preserve(&self) -> zbus::Result<String>;

    /// FinalKillSignal property
    #[zbus(property)]
    fn final_kill_signal(&self) -> zbus::Result<i32>;

    /// GID property
    #[zbus(property, name = "GID")]
    fn gid(&self) -> zbus::Result<u32>;

    /// Group property
    #[zbus(property)]
    fn group(&self) -> zbus::Result<String>;

    /// GuessMainPID property
    #[zbus(property, name = "GuessMainPID")]
    fn guess_main_pid(&self) -> zbus::Result<bool>;

    /// IOAccounting property
    #[zbus(property, name = "IOAccounting")]
    fn ioaccounting(&self) -> zbus::Result<bool>;

    /// IODeviceLatencyTargetUSec property
    #[zbus(property, name = "IODeviceLatencyTargetUSec")]
    fn iodevice_latency_target_usec(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IODeviceWeight property
    #[zbus(property, name = "IODeviceWeight")]
    fn iodevice_weight(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadBandwidthMax property
    #[zbus(property, name = "IOReadBandwidthMax")]
    fn ioread_bandwidth_max(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadBytes property
    #[zbus(property, name = "IOReadBytes")]
    fn ioread_bytes(&self) -> zbus::Result<u64>;

    /// IOReadIOPSMax property
    #[zbus(property, name = "IOReadIOPSMax")]
    fn ioread_iopsmax(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadOperations property
    #[zbus(property, name = "IOReadOperations")]
    fn ioread_operations(&self) -> zbus::Result<u64>;

    /// IOSchedulingClass property
    #[zbus(property, name = "IOSchedulingClass")]
    fn ioscheduling_class(&self) -> zbus::Result<i32>;

    /// IOSchedulingPriority property
    #[zbus(property, name = "IOSchedulingPriority")]
    fn ioscheduling_priority(&self) -> zbus::Result<i32>;

    /// IOWeight property
    #[zbus(property, name = "IOWeight")]
    fn ioweight(&self) -> zbus::Result<u64>;

    /// IOWriteBandwidthMax property
    #[zbus(property, name = "IOWriteBandwidthMax")]
    fn iowrite_bandwidth_max(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOWriteBytes property
    #[zbus(property, name = "IOWriteBytes")]
    fn iowrite_bytes(&self) -> zbus::Result<u64>;

    /// IOWriteIOPSMax property
    #[zbus(property, name = "IOWriteIOPSMax")]
    fn iowrite_iopsmax(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOWriteOperations property
    #[zbus(property, name = "IOWriteOperations")]
    fn iowrite_operations(&self) -> zbus::Result<u64>;

    /// IPAccounting property
    #[zbus(property, name = "IPAccounting")]
    fn ipaccounting(&self) -> zbus::Result<bool>;

    /// IPAddressAllow property
    #[zbus(property, name = "IPAddressAllow")]
    fn ipaddress_allow(&self) -> zbus::Result<Vec<(i32, Vec<u8>, u32)>>;

    /// IPAddressDeny property
    #[zbus(property, name = "IPAddressDeny")]
    fn ipaddress_deny(&self) -> zbus::Result<Vec<(i32, Vec<u8>, u32)>>;

    /// IPCNamespacePath property
    #[zbus(property, name = "IPCNamespacePath")]
    fn ipcnamespace_path(&self) -> zbus::Result<String>;

    /// IPEgressBytes property
    #[zbus(property, name = "IPEgressBytes")]
    fn ipegress_bytes(&self) -> zbus::Result<u64>;

    /// IPEgressFilterPath property
    #[zbus(property, name = "IPEgressFilterPath")]
    fn ipegress_filter_path(&self) -> zbus::Result<Vec<String>>;

    /// IPEgressPackets property
    #[zbus(property, name = "IPEgressPackets")]
    fn ipegress_packets(&self) -> zbus::Result<u64>;

    /// IPIngressBytes property
    #[zbus(property, name = "IPIngressBytes")]
    fn ipingress_bytes(&self) -> zbus::Result<u64>;

    /// IPIngressFilterPath property
    #[zbus(property, name = "IPIngressFilterPath")]
    fn ipingress_filter_path(&self) -> zbus::Result<Vec<String>>;

    /// IPIngressPackets property
    #[zbus(property, name = "IPIngressPackets")]
    fn ipingress_packets(&self) -> zbus::Result<u64>;

    /// IgnoreSIGPIPE property
    #[zbus(property, name = "IgnoreSIGPIPE")]
    fn ignore_sigpipe(&self) -> zbus::Result<bool>;

    /// ImportCredential property
    #[zbus(property)]
    fn import_credential(&self) -> zbus::Result<Vec<String>>;

    /// InaccessiblePaths property
    #[zbus(property)]
    fn inaccessible_paths(&self) -> zbus::Result<Vec<String>>;

    /// KeyringMode property
    #[zbus(property)]
    fn keyring_mode(&self) -> zbus::Result<String>;

    /// KillMode property
    #[zbus(property)]
    fn kill_mode(&self) -> zbus::Result<String>;

    /// KillSignal property
    #[zbus(property)]
    fn kill_signal(&self) -> zbus::Result<i32>;

    /// LimitAS property
    #[zbus(property, name = "LimitAS")]
    fn limit_as(&self) -> zbus::Result<u64>;

    /// LimitASSoft property
    #[zbus(property, name = "LimitASSoft")]
    fn limit_assoft(&self) -> zbus::Result<u64>;

    /// LimitCORE property
    #[zbus(property, name = "LimitCORE")]
    fn limit_core(&self) -> zbus::Result<u64>;

    /// LimitCORESoft property
    #[zbus(property, name = "LimitCORESoft")]
    fn limit_coresoft(&self) -> zbus::Result<u64>;

    /// LimitCPU property
    #[zbus(property, name = "LimitCPU")]
    fn limit_cpu(&self) -> zbus::Result<u64>;

    /// LimitCPUSoft property
    #[zbus(property, name = "LimitCPUSoft")]
    fn limit_cpusoft(&self) -> zbus::Result<u64>;

    /// LimitDATA property
    #[zbus(property, name = "LimitDATA")]
    fn limit_data(&self) -> zbus::Result<u64>;

    /// LimitDATASoft property
    #[zbus(property, name = "LimitDATASoft")]
    fn limit_datasoft(&self) -> zbus::Result<u64>;

    /// LimitFSIZE property
    #[zbus(property, name = "LimitFSIZE")]
    fn limit_fsize(&self) -> zbus::Result<u64>;

    /// LimitFSIZESoft property
    #[zbus(property, name = "LimitFSIZESoft")]
    fn limit_fsizesoft(&self) -> zbus::Result<u64>;

    /// LimitLOCKS property
    #[zbus(property, name = "LimitLOCKS")]
    fn limit_locks(&self) -> zbus::Result<u64>;

    /// LimitLOCKSSoft property
    #[zbus(property, name = "LimitLOCKSSoft")]
    fn limit_lockssoft(&self) -> zbus::Result<u64>;

    /// LimitMEMLOCK property
    #[zbus(property, name = "LimitMEMLOCK")]
    fn limit_memlock(&self) -> zbus::Result<u64>;

    /// LimitMEMLOCKSoft property
    #[zbus(property, name = "LimitMEMLOCKSoft")]
    fn limit_memlocksoft(&self) -> zbus::Result<u64>;

    /// LimitMSGQUEUE property
    #[zbus(property, name = "LimitMSGQUEUE")]
    fn limit_msgqueue(&self) -> zbus::Result<u64>;

    /// LimitMSGQUEUESoft property
    #[zbus(property, name = "LimitMSGQUEUESoft")]
    fn limit_msgqueuesoft(&self) -> zbus::Result<u64>;

    /// LimitNICE property
    #[zbus(property, name = "LimitNICE")]
    fn limit_nice(&self) -> zbus::Result<u64>;

    /// LimitNICESoft property
    #[zbus(property, name = "LimitNICESoft")]
    fn limit_nicesoft(&self) -> zbus::Result<u64>;

    /// LimitNOFILE property
    #[zbus(property, name = "LimitNOFILE")]
    fn limit_nofile(&self) -> zbus::Result<u64>;

    /// LimitNOFILESoft property
    #[zbus(property, name = "LimitNOFILESoft")]
    fn limit_nofilesoft(&self) -> zbus::Result<u64>;

    /// LimitNPROC property
    #[zbus(property, name = "LimitNPROC")]
    fn limit_nproc(&self) -> zbus::Result<u64>;

    /// LimitNPROCSoft property
    #[zbus(property, name = "LimitNPROCSoft")]
    fn limit_nprocsoft(&self) -> zbus::Result<u64>;

    /// LimitRSS property
    #[zbus(property, name = "LimitRSS")]
    fn limit_rss(&self) -> zbus::Result<u64>;

    /// LimitRSSSoft property
    #[zbus(property, name = "LimitRSSSoft")]
    fn limit_rsssoft(&self) -> zbus::Result<u64>;

    /// LimitRTPRIO property
    #[zbus(property, name = "LimitRTPRIO")]
    fn limit_rtprio(&self) -> zbus::Result<u64>;

    /// LimitRTPRIOSoft property
    #[zbus(property, name = "LimitRTPRIOSoft")]
    fn limit_rtpriosoft(&self) -> zbus::Result<u64>;

    /// LimitRTTIME property
    #[zbus(property, name = "LimitRTTIME")]
    fn limit_rttime(&self) -> zbus::Result<u64>;

    /// LimitRTTIMESoft property
    #[zbus(property, name = "LimitRTTIMESoft")]
    fn limit_rttimesoft(&self) -> zbus::Result<u64>;

    /// LimitSIGPENDING property
    #[zbus(property, name = "LimitSIGPENDING")]
    fn limit_sigpending(&self) -> zbus::Result<u64>;

    /// LimitSIGPENDINGSoft property
    #[zbus(property, name = "LimitSIGPENDINGSoft")]
    fn limit_sigpendingsoft(&self) -> zbus::Result<u64>;

    /// LimitSTACK property
    #[zbus(property, name = "LimitSTACK")]
    fn limit_stack(&self) -> zbus::Result<u64>;

    /// LimitSTACKSoft property
    #[zbus(property, name = "LimitSTACKSoft")]
    fn limit_stacksoft(&self) -> zbus::Result<u64>;

    /// LoadCredential property
    #[zbus(property)]
    fn load_credential(&self) -> zbus::Result<Vec<(String, String)>>;

    /// LoadCredentialEncrypted property
    #[zbus(property)]
    fn load_credential_encrypted(&self) -> zbus::Result<Vec<(String, String)>>;

    /// LockPersonality property
    #[zbus(property)]
    fn lock_personality(&self) -> zbus::Result<bool>;

    /// LogExtraFields property
    #[zbus(property)]
    fn log_extra_fields(&self) -> zbus::Result<Vec<Vec<u8>>>;

    /// LogFilterPatterns property
    #[zbus(property)]
    fn log_filter_patterns(&self) -> zbus::Result<Vec<(bool, String)>>;

    /// LogLevelMax property
    #[zbus(property)]
    fn log_level_max(&self) -> zbus::Result<i32>;

    /// LogNamespace property
    #[zbus(property)]
    fn log_namespace(&self) -> zbus::Result<String>;

    /// LogRateLimitBurst property
    #[zbus(property)]
    fn log_rate_limit_burst(&self) -> zbus::Result<u32>;

    /// LogRateLimitIntervalUSec property
    #[zbus(property, name = "LogRateLimitIntervalUSec")]
    fn log_rate_limit_interval_usec(&self) -> zbus::Result<u64>;

    /// LogsDirectory property
    #[zbus(property)]
    fn logs_directory(&self) -> zbus::Result<Vec<String>>;

    /// LogsDirectoryMode property
    #[zbus(property)]
    fn logs_directory_mode(&self) -> zbus::Result<u32>;

    /// LogsDirectorySymlink property
    #[zbus(property)]
    fn logs_directory_symlink(&self) -> zbus::Result<Vec<(String, String, u64)>>;

    /// MainPID property
    #[zbus(property, name = "MainPID")]
    fn main_pid(&self) -> zbus::Result<u32>;

    /// ManagedOOMMemoryPressure property
    #[zbus(property, name = "ManagedOOMMemoryPressure")]
    fn managed_oommemory_pressure(&self) -> zbus::Result<String>;

    /// ManagedOOMMemoryPressureLimit property
    #[zbus(property, name = "ManagedOOMMemoryPressureLimit")]
    fn managed_oommemory_pressure_limit(&self) -> zbus::Result<u32>;

    /// ManagedOOMPreference property
    #[zbus(property, name = "ManagedOOMPreference")]
    fn managed_oompreference(&self) -> zbus::Result<String>;

    /// ManagedOOMSwap property
    #[zbus(property, name = "ManagedOOMSwap")]
    fn managed_oomswap(&self) -> zbus::Result<String>;

    /// MemoryAccounting property
    #[zbus(property)]
    fn memory_accounting(&self) -> zbus::Result<bool>;

    /// MemoryAvailable property
    #[zbus(property)]
    fn memory_available(&self) -> zbus::Result<u64>;

    /// MemoryCurrent property
    #[zbus(property)]
    fn memory_current(&self) -> zbus::Result<u64>;

    /// MemoryDenyWriteExecute property
    #[zbus(property)]
    fn memory_deny_write_execute(&self) -> zbus::Result<bool>;

    /// MemoryHigh property
    #[zbus(property)]
    fn memory_high(&self) -> zbus::Result<u64>;

    /// MemoryKSM property
    #[zbus(property, name = "MemoryKSM")]
    fn memory_ksm(&self) -> zbus::Result<bool>;

    /// MemoryLimit property
    #[zbus(property)]
    fn memory_limit(&self) -> zbus::Result<u64>;

    /// MemoryLow property
    #[zbus(property)]
    fn memory_low(&self) -> zbus::Result<u64>;

    /// MemoryMax property
    #[zbus(property)]
    fn memory_max(&self) -> zbus::Result<u64>;

    /// MemoryMin property
    #[zbus(property)]
    fn memory_min(&self) -> zbus::Result<u64>;

    /// MemoryPeak property
    #[zbus(property)]
    fn memory_peak(&self) -> zbus::Result<u64>;

    /// MemoryPressureThresholdUSec property
    #[zbus(property, name = "MemoryPressureThresholdUSec")]
    fn memory_pressure_threshold_usec(&self) -> zbus::Result<u64>;

    /// MemoryPressureWatch property
    #[zbus(property)]
    fn memory_pressure_watch(&self) -> zbus::Result<String>;

    /// MemorySwapCurrent property
    #[zbus(property)]
    fn memory_swap_current(&self) -> zbus::Result<u64>;

    /// MemorySwapMax property
    #[zbus(property)]
    fn memory_swap_max(&self) -> zbus::Result<u64>;

    /// MemorySwapPeak property
    #[zbus(property)]
    fn memory_swap_peak(&self) -> zbus::Result<u64>;

    /// MemoryZSwapCurrent property
    #[zbus(property, name = "MemoryZSwapCurrent")]
    fn memory_zswap_current(&self) -> zbus::Result<u64>;

    /// MemoryZSwapMax property
    #[zbus(property, name = "MemoryZSwapMax")]
    fn memory_zswap_max(&self) -> zbus::Result<u64>;

    /// MountAPIVFS property
    #[zbus(property, name = "MountAPIVFS")]
    fn mount_apivfs(&self) -> zbus::Result<bool>;

    /// MountFlags property
    #[zbus(property)]
    fn mount_flags(&self) -> zbus::Result<u64>;

    /// MountImagePolicy property
    #[zbus(property)]
    fn mount_image_policy(&self) -> zbus::Result<String>;

    /// MountImages property
    #[zbus(property)]
    #[allow(clippy::type_complexity)]
    fn mount_images(&self) -> zbus::Result<Vec<(String, String, bool, Vec<(String, String)>)>>;

    /// NFTSet property
    #[zbus(property, name = "NFTSet")]
    fn nftset(&self) -> zbus::Result<Vec<(i32, i32, String, String)>>;

    /// NFileDescriptorStore property
    #[zbus(property, name = "NFileDescriptorStore")]
    fn nfile_descriptor_store(&self) -> zbus::Result<u32>;

    /// NRestarts property
    #[zbus(property, name = "NRestarts")]
    fn nrestarts(&self) -> zbus::Result<u32>;

    /// NUMAMask property
    #[zbus(property, name = "NUMAMask")]
    fn numamask(&self) -> zbus::Result<Vec<u8>>;

    /// NUMAPolicy property
    #[zbus(property, name = "NUMAPolicy")]
    fn numapolicy(&self) -> zbus::Result<i32>;

    /// NetworkNamespacePath property
    #[zbus(property)]
    fn network_namespace_path(&self) -> zbus::Result<String>;

    /// Nice property
    #[zbus(property)]
    fn nice(&self) -> zbus::Result<i32>;

    /// NoExecPaths property
    #[zbus(property)]
    fn no_exec_paths(&self) -> zbus::Result<Vec<String>>;

    /// NoNewPrivileges property
    #[zbus(property)]
    fn no_new_privileges(&self) -> zbus::Result<bool>;

    /// NonBlocking property
    #[zbus(property)]
    fn non_blocking(&self) -> zbus::Result<bool>;

    /// NotifyAccess property
    #[zbus(property)]
    fn notify_access(&self) -> zbus::Result<String>;

    /// OOMPolicy property
    #[zbus(property, name = "OOMPolicy")]
    fn oompolicy(&self) -> zbus::Result<String>;

    /// OOMScoreAdjust property
    #[zbus(property, name = "OOMScoreAdjust")]
    fn oomscore_adjust(&self) -> zbus::Result<i32>;

    /// OpenFile property
    #[zbus(property)]
    fn open_file(&self) -> zbus::Result<Vec<(String, String, u64)>>;

    /// PAMName property
    #[zbus(property, name = "PAMName")]
    fn pamname(&self) -> zbus::Result<String>;

    /// PIDFile property
    #[zbus(property, name = "PIDFile")]
    fn pidfile(&self) -> zbus::Result<String>;

    /// PassEnvironment property
    #[zbus(property)]
    fn pass_environment(&self) -> zbus::Result<Vec<String>>;

    /// Personality property
    #[zbus(property)]
    fn personality(&self) -> zbus::Result<String>;

    /// PrivateDevices property
    #[zbus(property)]
    fn private_devices(&self) -> zbus::Result<bool>;

    /// PrivateIPC property
    #[zbus(property, name = "PrivateIPC")]
    fn private_ipc(&self) -> zbus::Result<bool>;

    /// PrivateMounts property
    #[zbus(property)]
    fn private_mounts(&self) -> zbus::Result<bool>;

    /// PrivateNetwork property
    #[zbus(property)]
    fn private_network(&self) -> zbus::Result<bool>;

    /// PrivateTmp property
    #[zbus(property)]
    fn private_tmp(&self) -> zbus::Result<bool>;

    /// PrivateUsers property
    #[zbus(property)]
    fn private_users(&self) -> zbus::Result<bool>;

    /// ProcSubset property
    #[zbus(property)]
    fn proc_subset(&self) -> zbus::Result<String>;

    /// ProtectClock property
    #[zbus(property)]
    fn protect_clock(&self) -> zbus::Result<bool>;

    /// ProtectControlGroups property
    #[zbus(property)]
    fn protect_control_groups(&self) -> zbus::Result<bool>;

    /// ProtectHome property
    #[zbus(property)]
    fn protect_home(&self) -> zbus::Result<String>;

    /// ProtectHostname property
    #[zbus(property)]
    fn protect_hostname(&self) -> zbus::Result<bool>;

    /// ProtectKernelLogs property
    #[zbus(property)]
    fn protect_kernel_logs(&self) -> zbus::Result<bool>;

    /// ProtectKernelModules property
    #[zbus(property)]
    fn protect_kernel_modules(&self) -> zbus::Result<bool>;

    /// ProtectKernelTunables property
    #[zbus(property)]
    fn protect_kernel_tunables(&self) -> zbus::Result<bool>;

    /// ProtectProc property
    #[zbus(property)]
    fn protect_proc(&self) -> zbus::Result<String>;

    /// ProtectSystem property
    #[zbus(property)]
    fn protect_system(&self) -> zbus::Result<String>;

    /// ReadOnlyPaths property
    #[zbus(property)]
    fn read_only_paths(&self) -> zbus::Result<Vec<String>>;

    /// ReadWritePaths property
    #[zbus(property)]
    fn read_write_paths(&self) -> zbus::Result<Vec<String>>;

    /// ReloadResult property
    #[zbus(property)]
    fn reload_result(&self) -> zbus::Result<String>;

    /// ReloadSignal property
    #[zbus(property)]
    fn reload_signal(&self) -> zbus::Result<i32>;

    /// RemainAfterExit property
    #[zbus(property)]
    fn remain_after_exit(&self) -> zbus::Result<bool>;

    /// RemoveIPC property
    #[zbus(property, name = "RemoveIPC")]
    fn remove_ipc(&self) -> zbus::Result<bool>;

    /// Restart property
    #[zbus(property)]
    fn restart(&self) -> zbus::Result<String>;

    /// RestartForceExitStatus property
    #[zbus(property)]
    fn restart_force_exit_status(&self) -> zbus::Result<(Vec<i32>, Vec<i32>)>;

    /// RestartKillSignal property
    #[zbus(property)]
    fn restart_kill_signal(&self) -> zbus::Result<i32>;

    /// RestartMaxDelayUSec property
    #[zbus(property, name = "RestartMaxDelayUSec")]
    fn restart_max_delay_usec(&self) -> zbus::Result<u64>;

    /// RestartMode property
    #[zbus(property)]
    fn restart_mode(&self) -> zbus::Result<String>;

    /// RestartPreventExitStatus property
    #[zbus(property)]
    fn restart_prevent_exit_status(&self) -> zbus::Result<(Vec<i32>, Vec<i32>)>;

    /// RestartSteps property
    #[zbus(property)]
    fn restart_steps(&self) -> zbus::Result<u32>;

    /// RestartUSec property
    #[zbus(property, name = "RestartUSec")]
    fn restart_usec(&self) -> zbus::Result<u64>;

    /// RestartUSecNext property
    #[zbus(property, name = "RestartUSecNext")]
    fn restart_usec_next(&self) -> zbus::Result<u64>;

    /// RestrictAddressFamilies property
    #[zbus(property)]
    fn restrict_address_families(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// RestrictFileSystems property
    #[zbus(property)]
    fn restrict_file_systems(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// RestrictNamespaces property
    #[zbus(property)]
    fn restrict_namespaces(&self) -> zbus::Result<u64>;

    /// RestrictNetworkInterfaces property
    #[zbus(property)]
    fn restrict_network_interfaces(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// RestrictRealtime property
    #[zbus(property)]
    fn restrict_realtime(&self) -> zbus::Result<bool>;

    /// RestrictSUIDSGID property
    #[zbus(property, name = "RestrictSUIDSGID")]
    fn restrict_suidsgid(&self) -> zbus::Result<bool>;

    /// Result property
    #[zbus(property)]
    fn result(&self) -> zbus::Result<String>;

    /// RootDirectory property
    #[zbus(property)]
    fn root_directory(&self) -> zbus::Result<String>;

    /// RootDirectoryStartOnly property
    #[zbus(property)]
    fn root_directory_start_only(&self) -> zbus::Result<bool>;

    /// RootEphemeral property
    #[zbus(property)]
    fn root_ephemeral(&self) -> zbus::Result<bool>;

    /// RootHash property
    #[zbus(property)]
    fn root_hash(&self) -> zbus::Result<Vec<u8>>;

    /// RootHashPath property
    #[zbus(property)]
    fn root_hash_path(&self) -> zbus::Result<String>;

    /// RootHashSignature property
    #[zbus(property)]
    fn root_hash_signature(&self) -> zbus::Result<Vec<u8>>;

    /// RootHashSignaturePath property
    #[zbus(property)]
    fn root_hash_signature_path(&self) -> zbus::Result<String>;

    /// RootImage property
    #[zbus(property)]
    fn root_image(&self) -> zbus::Result<String>;

    /// RootImageOptions property
    #[zbus(property)]
    fn root_image_options(&self) -> zbus::Result<Vec<(String, String)>>;

    /// RootImagePolicy property
    #[zbus(property)]
    fn root_image_policy(&self) -> zbus::Result<String>;

    /// RootVerity property
    #[zbus(property)]
    fn root_verity(&self) -> zbus::Result<String>;

    /// RuntimeDirectory property
    #[zbus(property)]
    fn runtime_directory(&self) -> zbus::Result<Vec<String>>;

    /// RuntimeDirectoryMode property
    #[zbus(property)]
    fn runtime_directory_mode(&self) -> zbus::Result<u32>;

    /// RuntimeDirectoryPreserve property
    #[zbus(property)]
    fn runtime_directory_preserve(&self) -> zbus::Result<String>;

    /// RuntimeDirectorySymlink property
    #[zbus(property)]
    fn runtime_directory_symlink(&self) -> zbus::Result<Vec<(String, String, u64)>>;

    /// RuntimeMaxUSec property
    #[zbus(property, name = "RuntimeMaxUSec")]
    fn runtime_max_usec(&self) -> zbus::Result<u64>;

    /// RuntimeRandomizedExtraUSec property
    #[zbus(property, name = "RuntimeRandomizedExtraUSec")]
    fn runtime_randomized_extra_usec(&self) -> zbus::Result<u64>;

    /// SELinuxContext property
    #[zbus(property, name = "SELinuxContext")]
    fn selinux_context(&self) -> zbus::Result<(bool, String)>;

    /// SameProcessGroup property
    #[zbus(property)]
    fn same_process_group(&self) -> zbus::Result<bool>;

    /// SecureBits property
    #[zbus(property)]
    fn secure_bits(&self) -> zbus::Result<i32>;

    /// SendSIGHUP property
    #[zbus(property, name = "SendSIGHUP")]
    fn send_sighup(&self) -> zbus::Result<bool>;

    /// SendSIGKILL property
    #[zbus(property, name = "SendSIGKILL")]
    fn send_sigkill(&self) -> zbus::Result<bool>;

    /// SetCredential property
    #[zbus(property)]
    fn set_credential(&self) -> zbus::Result<Vec<(String, Vec<u8>)>>;

    /// SetCredentialEncrypted property
    #[zbus(property)]
    fn set_credential_encrypted(&self) -> zbus::Result<Vec<(String, Vec<u8>)>>;

    /// SetLoginEnvironment property
    #[zbus(property)]
    fn set_login_environment(&self) -> zbus::Result<bool>;

    /// Slice property
    #[zbus(property)]
    fn slice(&self) -> zbus::Result<String>;

    /// SmackProcessLabel property
    #[zbus(property)]
    fn smack_process_label(&self) -> zbus::Result<(bool, String)>;

    /// SocketBindAllow property
    #[zbus(property)]
    fn socket_bind_allow(&self) -> zbus::Result<Vec<(i32, i32, u16, u16)>>;

    /// SocketBindDeny property
    #[zbus(property)]
    fn socket_bind_deny(&self) -> zbus::Result<Vec<(i32, i32, u16, u16)>>;

    /// StandardError property
    #[zbus(property)]
    fn standard_error(&self) -> zbus::Result<String>;

    /// StandardErrorFileDescriptorName property
    #[zbus(property)]
    fn standard_error_file_descriptor_name(&self) -> zbus::Result<String>;

    /// StandardInput property
    #[zbus(property)]
    fn standard_input(&self) -> zbus::Result<String>;

    /// StandardInputData property
    #[zbus(property)]
    fn standard_input_data(&self) -> zbus::Result<Vec<u8>>;

    /// StandardInputFileDescriptorName property
    #[zbus(property)]
    fn standard_input_file_descriptor_name(&self) -> zbus::Result<String>;

    /// StandardOutput property
    #[zbus(property)]
    fn standard_output(&self) -> zbus::Result<String>;

    /// StandardOutputFileDescriptorName property
    #[zbus(property)]
    fn standard_output_file_descriptor_name(&self) -> zbus::Result<String>;

    /// StartupAllowedCPUs property
    #[zbus(property, name = "StartupAllowedCPUs")]
    fn startup_allowed_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// StartupAllowedMemoryNodes property
    #[zbus(property)]
    fn startup_allowed_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// StartupBlockIOWeight property
    #[zbus(property, name = "StartupBlockIOWeight")]
    fn startup_block_ioweight(&self) -> zbus::Result<u64>;

    /// StartupCPUShares property
    #[zbus(property, name = "StartupCPUShares")]
    fn startup_cpushares(&self) -> zbus::Result<u64>;

    /// StartupCPUWeight property
    #[zbus(property, name = "StartupCPUWeight")]
    fn startup_cpuweight(&self) -> zbus::Result<u64>;

    /// StartupIOWeight property
    #[zbus(property, name = "StartupIOWeight")]
    fn startup_ioweight(&self) -> zbus::Result<u64>;

    /// StartupMemoryHigh property
    #[zbus(property)]
    fn startup_memory_high(&self) -> zbus::Result<u64>;

    /// StartupMemoryLow property
    #[zbus(property)]
    fn startup_memory_low(&self) -> zbus::Result<u64>;

    /// StartupMemoryMax property
    #[zbus(property)]
    fn startup_memory_max(&self) -> zbus::Result<u64>;

    /// StartupMemorySwapMax property
    #[zbus(property)]
    fn startup_memory_swap_max(&self) -> zbus::Result<u64>;

    /// StartupMemoryZSwapMax property
    #[zbus(property, name = "StartupMemoryZSwapMax")]
    fn startup_memory_zswap_max(&self) -> zbus::Result<u64>;

    /// StateDirectory property
    #[zbus(property)]
    fn state_directory(&self) -> zbus::Result<Vec<String>>;

    /// StateDirectoryMode property
    #[zbus(property)]
    fn state_directory_mode(&self) -> zbus::Result<u32>;

    /// StateDirectorySymlink property
    #[zbus(property)]
    fn state_directory_symlink(&self) -> zbus::Result<Vec<(String, String, u64)>>;

    /// StatusErrno property
    #[zbus(property)]
    fn status_errno(&self) -> zbus::Result<i32>;

    /// StatusText property
    #[zbus(property)]
    fn status_text(&self) -> zbus::Result<String>;

    /// SuccessExitStatus property
    #[zbus(property)]
    fn success_exit_status(&self) -> zbus::Result<(Vec<i32>, Vec<i32>)>;

    /// SupplementaryGroups property
    #[zbus(property)]
    fn supplementary_groups(&self) -> zbus::Result<Vec<String>>;

    /// SyslogFacility property
    #[zbus(property)]
    fn syslog_facility(&self) -> zbus::Result<i32>;

    /// SyslogIdentifier property
    #[zbus(property)]
    fn syslog_identifier(&self) -> zbus::Result<String>;

    /// SyslogLevel property
    #[zbus(property)]
    fn syslog_level(&self) -> zbus::Result<i32>;

    /// SyslogLevelPrefix property
    #[zbus(property)]
    fn syslog_level_prefix(&self) -> zbus::Result<bool>;

    /// SyslogPriority property
    #[zbus(property)]
    fn syslog_priority(&self) -> zbus::Result<i32>;

    /// SystemCallArchitectures property
    #[zbus(property)]
    fn system_call_architectures(&self) -> zbus::Result<Vec<String>>;

    /// SystemCallErrorNumber property
    #[zbus(property)]
    fn system_call_error_number(&self) -> zbus::Result<i32>;

    /// SystemCallFilter property
    #[zbus(property)]
    fn system_call_filter(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// SystemCallLog property
    #[zbus(property)]
    fn system_call_log(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// TTYColumns property
    #[zbus(property, name = "TTYColumns")]
    fn ttycolumns(&self) -> zbus::Result<u16>;

    /// TTYPath property
    #[zbus(property, name = "TTYPath")]
    fn ttypath(&self) -> zbus::Result<String>;

    /// TTYReset property
    #[zbus(property, name = "TTYReset")]
    fn ttyreset(&self) -> zbus::Result<bool>;

    /// TTYRows property
    #[zbus(property, name = "TTYRows")]
    fn ttyrows(&self) -> zbus::Result<u16>;

    /// TTYVHangup property
    #[zbus(property, name = "TTYVHangup")]
    fn ttyvhangup(&self) -> zbus::Result<bool>;

    /// TTYVTDisallocate property
    #[zbus(property, name = "TTYVTDisallocate")]
    fn ttyvtdisallocate(&self) -> zbus::Result<bool>;

    /// TasksAccounting property
    #[zbus(property)]
    fn tasks_accounting(&self) -> zbus::Result<bool>;

    /// TasksCurrent property
    #[zbus(property)]
    fn tasks_current(&self) -> zbus::Result<u64>;

    /// TasksMax property
    #[zbus(property)]
    fn tasks_max(&self) -> zbus::Result<u64>;

    /// TemporaryFileSystem property
    #[zbus(property)]
    fn temporary_file_system(&self) -> zbus::Result<Vec<(String, String)>>;

    /// TimeoutAbortUSec property
    #[zbus(property, name = "TimeoutAbortUSec")]
    fn timeout_abort_usec(&self) -> zbus::Result<u64>;

    /// TimeoutCleanUSec property
    #[zbus(property, name = "TimeoutCleanUSec")]
    fn timeout_clean_usec(&self) -> zbus::Result<u64>;

    /// TimeoutStartFailureMode property
    #[zbus(property)]
    fn timeout_start_failure_mode(&self) -> zbus::Result<String>;

    /// TimeoutStartUSec property
    #[zbus(property, name = "TimeoutStartUSec")]
    fn timeout_start_usec(&self) -> zbus::Result<u64>;

    /// TimeoutStopFailureMode property
    #[zbus(property)]
    fn timeout_stop_failure_mode(&self) -> zbus::Result<String>;

    /// TimeoutStopUSec property
    #[zbus(property, name = "TimeoutStopUSec")]
    fn timeout_stop_usec(&self) -> zbus::Result<u64>;

    /// TimerSlackNSec property
    #[zbus(property, name = "TimerSlackNSec")]
    fn timer_slack_nsec(&self) -> zbus::Result<u64>;

    /// Type property
    #[zbus(property)]
    fn type_(&self) -> zbus::Result<String>;

    /// UID property
    #[zbus(property, name = "UID")]
    fn uid(&self) -> zbus::Result<u32>;

    /// UMask property
    #[zbus(property, name = "UMask")]
    fn umask(&self) -> zbus::Result<u32>;

    /// USBFunctionDescriptors property
    #[zbus(property, name = "USBFunctionDescriptors")]
    fn usbfunction_descriptors(&self) -> zbus::Result<String>;

    /// USBFunctionStrings property
    #[zbus(property, name = "USBFunctionStrings")]
    fn usbfunction_strings(&self) -> zbus::Result<String>;

    /// UnsetEnvironment property
    #[zbus(property)]
    fn unset_environment(&self) -> zbus::Result<Vec<String>>;

    /// User property
    #[zbus(property)]
    fn user(&self) -> zbus::Result<String>;

    /// UtmpIdentifier property
    #[zbus(property)]
    fn utmp_identifier(&self) -> zbus::Result<String>;

    /// UtmpMode property
    #[zbus(property)]
    fn utmp_mode(&self) -> zbus::Result<String>;

    /// WatchdogSignal property
    #[zbus(property)]
    fn watchdog_signal(&self) -> zbus::Result<i32>;

    /// WatchdogTimestamp property
    #[zbus(property)]
    fn watchdog_timestamp(&self) -> zbus::Result<u64>;

    /// WatchdogTimestampMonotonic property
    #[zbus(property)]
    fn watchdog_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// WatchdogUSec property
    #[zbus(property, name = "WatchdogUSec")]
    fn watchdog_usec(&self) -> zbus::Result<u64>;

    /// WorkingDirectory property
    #[zbus(property)]
    fn working_directory(&self) -> zbus::Result<String>;
}
