#![allow(warnings)]
#![allow(clippy)]
#![allow(unknown_lints)]
// This code was autogenerated with `dbus-codegen-rust -s -g -m None -d org.freedesktop.network1 -p /org/freedesktop/network1`, see https://github.com/diwic/dbus-rs
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusPeer
    for blocking::Proxy<'a, C>
{
    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C>
{
    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get<R0: for<'b> arg::Get<'b> + 'static>(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<R0, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set<I2: arg::Arg + arg::Append>(
        &self,
        interface_name: &str,
        property_name: &str,
        value: I2,
    ) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusProperties
    for blocking::Proxy<'a, C>
{
    fn get<R0: for<'b> arg::Get<'b> + 'static>(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> Result<R0, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface_name, property_name),
        )
        .and_then(|r: (arg::Variant<R0>,)| Ok((r.0).0))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "GetAll",
            (interface_name,),
        )
        .and_then(|r: (arg::PropMap,)| Ok(r.0))
    }

    fn set<I2: arg::Arg + arg::Append>(
        &self,
        interface_name: &str,
        property_name: &str,
        value: I2,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface_name, property_name, arg::Variant(value)),
        )
    }
}

pub trait OrgFreedesktopNetwork1Manager {
    fn list_links(&self) -> Result<Vec<(i32, String, dbus::Path<'static>)>, dbus::Error>;
    fn get_link_by_name(&self, name: &str) -> Result<(i32, dbus::Path<'static>), dbus::Error>;
    fn get_link_by_index(&self, ifindex: i32)
        -> Result<(String, dbus::Path<'static>), dbus::Error>;
    fn set_link_ntp(&self, ifindex: i32, servers: Vec<&str>) -> Result<(), dbus::Error>;
    fn set_link_dns(&self, ifindex: i32, addresses: Vec<(i32, Vec<u8>)>)
        -> Result<(), dbus::Error>;
    fn set_link_dnsex(
        &self,
        ifindex: i32,
        addresses: Vec<(i32, Vec<u8>, u16, &str)>,
    ) -> Result<(), dbus::Error>;
    fn set_link_domains(&self, ifindex: i32, domains: Vec<(&str, bool)>)
        -> Result<(), dbus::Error>;
    fn set_link_default_route(&self, ifindex: i32, enable: bool) -> Result<(), dbus::Error>;
    fn set_link_llmnr(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error>;
    fn set_link_multicast_dns(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error>;
    fn set_link_dnsover_tls(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error>;
    fn set_link_dnssec(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error>;
    fn set_link_dnssecnegative_trust_anchors(
        &self,
        ifindex: i32,
        names: Vec<&str>,
    ) -> Result<(), dbus::Error>;
    fn revert_link_ntp(&self, ifindex: i32) -> Result<(), dbus::Error>;
    fn revert_link_dns(&self, ifindex: i32) -> Result<(), dbus::Error>;
    fn renew_link(&self, ifindex: i32) -> Result<(), dbus::Error>;
    fn force_renew_link(&self, ifindex: i32) -> Result<(), dbus::Error>;
    fn reconfigure_link(&self, ifindex: i32) -> Result<(), dbus::Error>;
    fn reload(&self) -> Result<(), dbus::Error>;
    fn describe_link(&self, ifindex: i32) -> Result<String, dbus::Error>;
    fn describe(&self) -> Result<String, dbus::Error>;
    fn operational_state(&self) -> Result<String, dbus::Error>;
    fn carrier_state(&self) -> Result<String, dbus::Error>;
    fn address_state(&self) -> Result<String, dbus::Error>;
    fn ipv4_address_state(&self) -> Result<String, dbus::Error>;
    fn ipv6_address_state(&self) -> Result<String, dbus::Error>;
    fn online_state(&self) -> Result<String, dbus::Error>;
    fn namespace_id(&self) -> Result<u64, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopNetwork1Manager for blocking::Proxy<'a, C>
{
    fn list_links(&self) -> Result<Vec<(i32, String, dbus::Path<'static>)>, dbus::Error> {
        self.method_call("org.freedesktop.network1.Manager", "ListLinks", ())
            .and_then(|r: (Vec<(i32, String, dbus::Path<'static>)>,)| Ok(r.0))
    }

    fn get_link_by_name(&self, name: &str) -> Result<(i32, dbus::Path<'static>), dbus::Error> {
        self.method_call("org.freedesktop.network1.Manager", "GetLinkByName", (name,))
    }

    fn get_link_by_index(
        &self,
        ifindex: i32,
    ) -> Result<(String, dbus::Path<'static>), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "GetLinkByIndex",
            (ifindex,),
        )
    }

    fn set_link_ntp(&self, ifindex: i32, servers: Vec<&str>) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkNTP",
            (ifindex, servers),
        )
    }

    fn set_link_dns(
        &self,
        ifindex: i32,
        addresses: Vec<(i32, Vec<u8>)>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDNS",
            (ifindex, addresses),
        )
    }

    fn set_link_dnsex(
        &self,
        ifindex: i32,
        addresses: Vec<(i32, Vec<u8>, u16, &str)>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDNSEx",
            (ifindex, addresses),
        )
    }

    fn set_link_domains(
        &self,
        ifindex: i32,
        domains: Vec<(&str, bool)>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDomains",
            (ifindex, domains),
        )
    }

    fn set_link_default_route(&self, ifindex: i32, enable: bool) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDefaultRoute",
            (ifindex, enable),
        )
    }

    fn set_link_llmnr(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkLLMNR",
            (ifindex, mode),
        )
    }

    fn set_link_multicast_dns(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkMulticastDNS",
            (ifindex, mode),
        )
    }

    fn set_link_dnsover_tls(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDNSOverTLS",
            (ifindex, mode),
        )
    }

    fn set_link_dnssec(&self, ifindex: i32, mode: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDNSSEC",
            (ifindex, mode),
        )
    }

    fn set_link_dnssecnegative_trust_anchors(
        &self,
        ifindex: i32,
        names: Vec<&str>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "SetLinkDNSSECNegativeTrustAnchors",
            (ifindex, names),
        )
    }

    fn revert_link_ntp(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "RevertLinkNTP",
            (ifindex,),
        )
    }

    fn revert_link_dns(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "RevertLinkDNS",
            (ifindex,),
        )
    }

    fn renew_link(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.network1.Manager", "RenewLink", (ifindex,))
    }

    fn force_renew_link(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "ForceRenewLink",
            (ifindex,),
        )
    }

    fn reconfigure_link(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "ReconfigureLink",
            (ifindex,),
        )
    }

    fn reload(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.network1.Manager", "Reload", ())
    }

    fn describe_link(&self, ifindex: i32) -> Result<String, dbus::Error> {
        self.method_call(
            "org.freedesktop.network1.Manager",
            "DescribeLink",
            (ifindex,),
        )
        .and_then(|r: (String,)| Ok(r.0))
    }

    fn describe(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.network1.Manager", "Describe", ())
            .and_then(|r: (String,)| Ok(r.0))
    }

    fn operational_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "OperationalState",
        )
    }

    fn carrier_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "CarrierState",
        )
    }

    fn address_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "AddressState",
        )
    }

    fn ipv4_address_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "IPv4AddressState",
        )
    }

    fn ipv6_address_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "IPv6AddressState",
        )
    }

    fn online_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "OnlineState",
        )
    }

    fn namespace_id(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.network1.Manager",
            "NamespaceId",
        )
    }
}
